#!/data/data/com.termux/files/usr/bin/bash

function setup_distro() {
    if [[ "$distro_answer" == "1" ]]; then
    selected_distro="debian"
    elif [[ "$distro_answer" == "2" ]]; then
    selected_distro="ubuntu"
    else
    selected_distro="debian"
    fi
    banner
    echo "${R}[${W}-${R}]${G}Installing ${C}proot-distro"${W}
    echo
    update_sys
    package_install_and_check "proot-distro"
    banner
    echo "${R}[${W}-${R}]${G}Setup Selected Distro: ${C}${selected_distro}"${W}
    echo
    pd install $selected_distro

    distro_path="$PREFIX/var/lib/proot-distro/installed-rootfs/$selected_distro"
}

#########################################################################
############################# Fix Sound Issue ###########################
#########################################################################

function distro_fix_sound_issue() {
    banner
    echo "${R}[${W}-${R}]${G} Fixing Proot Distro Sound Problem..."${W}
    echo
    echo "export PULSE_SERVER=127.0.0.1" >> "$distro_path/etc/profile"
cat <<EOF > "$HOME/.${selected_distro}-sound-access"
pulseaudio --start --exit-idle-time=-1
pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1
EOF
}

#########################################################################
######### Update Distro | Install Required Packages | Add User ##########
#########################################################################

function distro_basic_task() {
    banner
    echo "${R}[${W}-${R}]${G} Updating ${C}$selected_distro ${G}And Install Required Packages"${W}
    echo
    if [[ "pd_audio_config_answer" == "n" ]]; then
    distro_packs="sudo"
    else
    distro_packs="sudo pulseaudio"
    distro_fix_sound_issue
    fi
    if [[ "$useradd_answer" == "n" ]]; then
    final_user_name="root"
cat <<EOF > $HOME/useradd.sh
apt update
apt install $distro_packs -y
rm useradd.sh
EOF
proot-distro login $selected_distro -- /bin/sh -c 'mv /data/data/com.termux/files/home/useradd.sh $HOME'
proot-distro login $selected_distro -- /bin/sh -c 'bash useradd.sh'
    else
    final_user_name="${user_name}"
cat <<EOF > $HOME/useradd.sh
#!/bin/bash
apt update
apt install $distro_packs -y
useradd -m -s \$(which bash) ${final_user_name}
echo "${final_user_name}:${pass}" | chpasswd
chmod u+rw /etc/sudoers
echo "$final_user_name ALL=(ALL:ALL) ALL" >> /etc/sudoers
chmod u-w /etc/sudoers
rm useradd.sh
EOF
proot-distro login $selected_distro -- /bin/sh -c 'mv /data/data/com.termux/files/home/useradd.sh $HOME'
proot-distro login $selected_distro -- /bin/sh -c 'bash useradd.sh'
    fi

}

#########################################################################
#################### Create App Installer Shortcut ######################
#########################################################################

function distro_create_app_installer() {
    banner
    echo "${R}[${W}-${R}]${G} Creating App Launcher"${W}
    check_and_create_directory "$PREFIX/share/applications/pd_added"
if [[ "$useradd_answer" == "n" ]]; then
savepath="$distro_path/root"
else
savepath="$distro_path/home/$final_user_name"
fi
cat <<EOF > "$PREFIX/bin/$selected_distro"
#!/data/data/com.termux/files/usr/bin/bash

replace_exec_line() {
    sed -i 's/Exec=/Exec=pdrun /g' "$PREFIX/share/applications/pd_added/\$1.desktop" 2>/dev/null
}

copy_desktop_files() {
    for package in "\$@"; do
        echo "${R}[${W}-${R}]${G}Adding ${C}\${package} ${G}To Termux Menu"
        cp "$distro_path/usr/share/applications/\${package}.desktop" "$PREFIX/share/applications/pd_added/" 2>/dev/null
        replace_exec_line "\$package"
        grep_pattern="$distro_path/usr/share/applications/\${package}*.desktop"

        if [[ "\$(ls -1 \$grep_pattern 2>/dev/null)" ]]; then
		for subpackage in \$grep_pattern; do
			filename=\$(basename "\$subpackage")
			filename_no_ext="\${filename%.desktop}"
    # package_something="\${filename_no_ext#\${package}}"
    echo "${R}[${W}-${R}]${G}Adding ${C}\$filename_no_ext  ${G}To Termux Menu"
            cp "\$subpackage" "$PREFIX/share/applications/pd_added/" 2>/dev/null
            replace_exec_line "\$filename_no_ext"
        done
    fi
    done
}

remove_desktop_files() {
    for package in "\$@"; do
        echo "${G}[${W}-${G}]${R}Removing ${C}\${package} ${R}From Termux Menu"
        rm "$PREFIX/share/applications/pd_added/\${package}.desktop" 2>/dev/null
        grep_pattern="$distro_path/usr/share/applications/\${package}*.desktop"

        if [[ "\$(ls -1 \$grep_pattern 2>/dev/null)" ]]; then
		for subpackage in \$grep_pattern; do
			filename=\$(basename "\$subpackage")
			filename_no_ext="\${filename%.desktop}"
    # package_something="\${filename_no_ext#\${package}}"

    echo "${G}[${W}-${G}]${R}Removing ${C}\$filename_no_ext ${R}From Termux Menu"
    rm "$PREFIX/share/applications/pd_added/\${filename_no_ext}.desktop" 2>/dev/null
        done
    fi
    done
}

if [[ "\$#" -eq 0 ]]; then
    proot-distro login --user $final_user_name $selected_distro --shared-tmp
elif [[ "\$1" = "install" ]]; then
echo "sudo apt install \${@:2}
rm packinstall.sh
" > $savepath/packinstall.sh
    proot-distro login --user $final_user_name $selected_distro -- /bin/sh -c 'bash packinstall.sh'
    copy_desktop_files "\${@:2}"
elif [[ "\$1" = "remove" ]]; then
echo "sudo apt remove \${@:2}
rm packremove.sh
" > $savepath/packremove.sh
    proot-distro login --user $final_user_name $selected_distro -- /bin/sh -c 'bash packremove.sh'
    remove_desktop_files "\${@:2}"
elif [[ "\$1" = "autoremove" ]];then
echo "sudo apt autoremove \${@:2}
rm packremove.sh
" > $savepath/packremove.sh
    proot-distro login --user $final_user_name $selected_distro -- /bin/sh -c 'bash packremove.sh'
    remove_desktop_files "\${@:2}"
else
echo "sudo apt \$@
rm else.sh
" > $savepath/else.sh
    proot-distro login --user $final_user_name $selected_distro -- /bin/sh -c 'bash else.sh'
fi
gtk-update-icon-cache
EOF

chmod +x "$PREFIX/bin/$selected_distro"

#########################################################################
########################### Add To Menu Setup ###########################
#########################################################################
banner
echo "${R}[${W}-${R}]${G}Installing ${C}zenity"${W}
package_install_and_check "zenity"

check_and_create_directory "$PREFIX/share/applications/pd_added"
echo "#!/data/data/com.termux/files/usr/bin/bash
distro_path="$distro_path"
" > $PREFIX/bin/add2menu
cat <<'EOF' >> $PREFIX/bin/add2menu

list_desktop_files_with_name() {
    find "$1" -name "*.desktop" -type f -exec awk -F '=' '/^Name=/ {gsub(/.desktop$/,"",$2); print $2}' {} \;
}

action=$(zenity --list --title="Choose Action" --text="Select an action:" --checklist --column="" --column="Action" FALSE "Add Application To Termux Menu" FALSE "Remove Application From Termux Menu")

if [[ -z $action ]]; then
  zenity --info --text="No action selected. Quitting..." --title="Operation Cancelled"
  exit 0
fi

if [[ $action == *"Add Application To Termux Menu"* ]]; then
  # Get the list of .desktop files with Name parameter
  files=$(list_desktop_files_with_name "$distro_path/usr/share/applications/")

  # Display the list of files and ask user to select
  selected_names=$(zenity --list --title="Select .desktop Files" --text="Select The App Name To Add:" --checklist --column="Include" --column="Name" --separator="," $files)

  if [[ -z $selected_names ]]; then
    zenity --info --text="No file selected. Quitting..." --title="Operation Cancelled"
    exit 0
  fi

  IFS=',' read -ra selected_names_array <<< "$selected_names"

  for selected_name in "${selected_names_array[@]}"; do
    selected_file=$(find "$distro_path/usr/share/applications/" -name "*.desktop" -type f -exec awk -F '=' -v name="$selected_name" '$0 ~ "Name=" name {print FILENAME}' {} \;)

    cp "$selected_file" "$PREFIX/share/applications/pd_added/"
    sed -i 's/Exec=/Exec=pdrun /g' "$PREFIX/share/applications/pd_added/${selected_file##*/}"

    zenity --info --text="File '$selected_name' added successfully! Now Log Out And Log In Back" --title="Success"
  done
fi

if [[ $action == *"Remove Application From Termux Menu"* ]]; then
  # Get the list of .desktop files with Name parameter
  files=$(list_desktop_files_with_name "$PREFIX/share/applications/pd_added/")

  # Display the list of files and ask user to select
  selected_names=$(zenity --list --title="Select .desktop Files to Remove" --text="Choose .desktop files to remove:" --checklist --column="Include" --column="Name" --separator="," $files)

  if [[ -z $selected_names ]]; then
    zenity --info --text="No file selected for removal. Quitting..." --title="Operation Cancelled"
    exit 0
  fi

  IFS=',' read -ra selected_names_array <<< "$selected_names"

  for selected_name in "${selected_names_array[@]}"; do
    selected_file=$(find "$PREFIX/share/applications/pd_added/" -name "*.desktop" -type f -exec awk -F '=' -v name="$selected_name" '$0 ~ "Name=" name {print FILENAME}' {} \;)

    rm "$selected_file"

    zenity --info --text="File '$selected_name' has been removed successfully!" --title="Success"
  done
fi
gtk-update-icon-cache
EOF
chmod +x "$PREFIX/bin/add2menu"

check_and_create_directory "$PREFIX/share/applications/"
cat <<EOF > "$PREFIX/share/applications/add2menu.desktop"
[Desktop Entry]
Version=1.0
Type=Application
Name=Add To Menu
Comment=
Exec=add2menu
Icon=edit-move
Categories=System;
Path=
Terminal=false
StartupNotify=false
EOF
chmod +x $PREFIX/share/applications/add2menu.desktop
cp $PREFIX/share/applications/add2menu.desktop $HOME/Desktop/
}

#########################################################################
########################## App Launcher Setup ###########################
#########################################################################

function distro_app_launch_setup() {
cat <<EOF > "$PREFIX/bin/pdrun"
#!/data/data/com.termux/files/usr/bin/bash
bash ~/.${selected_distro}-sound-access
xhost +
proot-distro login $selected_distro --user $final_user_name --shared-tmp -- env DISPLAY=:1.0 $selected_pd_hw_method \$@
EOF
chmod +x "$PREFIX/bin/pdrun"
}

#########################################################################
###################### Distro Directory Link/Setup ######################
#########################################################################

function distro_folders_link() {
    echo "${R}[${W}-${R}]${G}Link Distro Directories With Internal Storage"${W}
cat <<EOF > "$savepath/setup-folders.sh"
#!/bin/bash
directories=(Desktop Music Downloads Pictures Videos)
for dir in "\${directories[@]}"; do
ln -s "/data/data/com.termux/files/home/\$dir" "\$HOME/"
done
rm setup-folders.sh
EOF
proot-distro login --user $final_user_name $selected_distro -- /bin/sh -c 'bash setup-folders.sh'
}


setup_distro
distro_basic_task
distro_create_app_installer
distro_app_launch_setup
distro_folders_link